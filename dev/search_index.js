var documenterSearchIndex = {"docs":
[{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"EditURL = \"https://github.com/francescoalemanno/KissABC.jl/blob/master/docs/literate/example_1.jl\"","category":"page"},{"location":"example_1/#A-gaussian-mixture-model-1","page":"Example: Gaussian Mixture","title":"A gaussian mixture model","text":"","category":"section"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"First of all we define our model,","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"using KissABC\nusing Distributions\n\nfunction model(P,N)\n    μ_1, μ_2, σ_1, σ_2, prob=P\n    d1=randn(N).*σ_1 .+ μ_1\n    d2=randn(N).*σ_2 .+ μ_2\n    ps=rand(N).<prob\n    R=zeros(N)\n    R[ps].=d1[ps]\n    R[.!ps].=d2[.!ps]\n    R\nend","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"Let's use the model to generate some data, this data will constitute our dataset","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"parameters = (1.0, 0.0, 0.2, 2.0, 0.4)\ndata=model(parameters,5000)","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"let's look at the data","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"using Plots\nhistogram(data)\nsavefig(\"ex1_hist1.svg\"); nothing # hide","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"(Image: ex1_hist1)","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"we can now try to infer all parameters using KissABC, first of all we need to define a reasonable prior for our model","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"prior=Factored(\n            Uniform(0,3), # there is surely a peak between 0 and 3\n            Uniform(-2,2), #there is a smeared distribution centered around 0\n            Uniform(0,1), # the peak has surely a width below 1\n            Uniform(0,4), # the smeared distribution surely has a width less than 4\n            Beta(4,4) # the number of total events from both distributions look about the same, so we will favor 0.5 just a bit\n        );\nnothing #hide","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"let's look at a sample from the prior, to see that it works","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"rand(prior)","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"now we need a distance function to compare datasets, this is possibly the worst distance we could use, but it will work out anyway","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"function D(x,y)\n    r=0:0.01:1\n    sum(abs2,quantile.(Ref(x),r).-quantile.(Ref(y),r))/length(r)\nend","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"we can now run ABCDE to get the posterior distribution of our parameters given the dateset data","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"res,Δ=ABCDE(prior,model,data,D,0.02,params=5000,parallel=true,verbose=false);\nnothing #hide","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"let's see the median and 95% confidence interval for the inferred parameters and let's compare them with the true values","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"function getstats(P,V)\n    (\n        param=P,\n        median=median(V),\n        lowerbound=quantile(V,0.05),\n        upperbound=quantile(V,0.95)\n    )\nend\n\nstats=getstats.((:μ_1, :μ_2, :σ_1, :σ_2, :prob),[getindex.(res,i) for i in 1:5])\n\nfor is in eachindex(stats)\n    println(parameters[is], \" → \", stats[is])\nend","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"we can see that the true values lie inside the confidence interval.","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"","category":"page"},{"location":"example_1/#","page":"Example: Gaussian Mixture","title":"Example: Gaussian Mixture","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = KissABC","category":"page"},{"location":"#KissABC-1","page":"Home","title":"KissABC","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [KissABC]","category":"page"},{"location":"#KissABC.Factored","page":"Home","title":"KissABC.Factored","text":"Factored{N} <: Distribution{Multivariate, MixedSupport}\n\na Distribution type that can be used to combine multiple UnivariateDistribution's and sample from them.\n\nExample: it can be used as prior = Factored(Normal(0,1), Uniform(-1,1))\n\n\n\n\n\n","category":"type"},{"location":"#KissABC.ABC","page":"Home","title":"KissABC.ABC","text":"ABC(prior, simulation, data, distance, α_target; nparticles = 100, params = (), parallel = false)\n\nClassical ABC rejection algorithm.\n\nArguments:\n\nprior: a Distribution to use for sampling candidate parameters\nsimulation: simulation function sim(prior_sample, constants) -> data that accepts a prior sample and the params constant and returns a simulated dataset\ndata: target dataset which must be compared with simulated datasets\ndistance: distance function dist(x,y) that return the distance (a scalar value) between x and y\nα_target: target acceptance rate for ABC rejection algorithm\nnparticles:  number of samples from the approximate posterior that will be returned\nparams: an optional set of constants to be passed as second argument to the simulation function\nparallel: when set to true multithreaded parallelism is enabled\n\n\n\n\n\n","category":"function"},{"location":"#KissABC.ABCDE","page":"Home","title":"KissABC.ABCDE","text":"ABCDE(prior, simulation, data, distance, ϵ_target; α=1/3, nparticles = 100, maxsimpp = 200, mcmcsteps=0, parallel = false, params = (), verbose = true)\n\nA sequential monte carlo algorithm inspired by differential evolution, work in progress, very efficient (simpler version of B.M.Turner 2012, https://doi.org/10.1016/j.jmp.2012.06.004)\n\nArguments:\n\nprior: a Distribution to use for sampling candidate parameters\nsimulation: simulation function sim(prior_sample, constants) -> data that accepts a prior sample and the params constant and returns a simulated dataset\ndata: target dataset which must be compared with simulated datasets\ndistance: distance function dist(x,y) that return the distance (a scalar value) between x and y\nϵ_target: maximum acceptable distance between simulated datasets and the target dataset\nα: the adaptive ϵ at every iteration is chosen as ϵ → m*(1-α)+M*α where m and M are respectively minimum and maximum distance of current population.\nnparticles: number of samples from the approximate posterior that will be returned\nmaxsimpp: average maximum number of simulations per particle\nmcmcsteps: option to sample more than 1 population of nparticles, the end population will contain (1 + mcmcsteps) * nparticles total particles\nparallel: when set to true multithreaded parallelism is enabled\nparams: an optional set of constants to be passed as second argument to the simulation function\nverbose: when set to true verbosity is enabled\n\n\n\n\n\n","category":"function"},{"location":"#KissABC.ABCSMCPR","page":"Home","title":"KissABC.ABCSMCPR","text":"ABCSMCPR(prior, simulation, data, distance, ϵ_target; nparticles = 100, maxsimpp = 1000.0, α = 0.3, c = 0.01, parallel = false, params = (), verbose = true)\n\nSequential Monte Carlo algorithm (Drovandi et al. 2011, https://doi.org/10.1111/j.1541-0420.2010.01410.x).\n\nArguments:\n\nprior: a Distribution to use for sampling candidate parameters\nsimulation: simulation function sim(prior_sample, constants) -> data that accepts a prior sample and the params constant and returns a simulated dataset\ndata: target dataset which must be compared with simulated datasets\ndistance: distance function dist(x,y) that return the distance (a scalar value) between x and y\nϵ_target: maximum acceptable distance between simulated datasets and the target dataset\nnparticles: number of samples from the approximate posterior that will be returned\nmaxsimpp: average maximum number of simulations per particle\nα: proportion of particles to retain at every iteration of SMC, other particles are resampled\nc: probability that a sample will not be updated during one iteration of SMC\nparallel: when set to true multithreaded parallelism is enabled\nparams: an optional set of constants to be passed as second argument to the simulation function\nverbose: when set to true verbosity is enabled\n\n\n\n\n\n","category":"function"},{"location":"#Base.rand-Tuple{Random.AbstractRNG,Factored}","page":"Home","title":"Base.rand","text":"rand(rng::AbstractRNG, factoreddist::Factored)\n\nfunction to sample one element from a Factored object\n\n\n\n\n\n","category":"method"},{"location":"#Distributions.pdf-Tuple{Factored,Any}","page":"Home","title":"Distributions.pdf","text":"pdf(d::Factored, x) = begin\n\nFunction to evaluate the pdf of a Factored distribution object\n\n\n\n\n\n","category":"method"},{"location":"#KissABC.compute_kernel_scales","page":"Home","title":"KissABC.compute_kernel_scales","text":"compute_kernel_scales(prior::Distribution, V)\n\nFunction for ABCSMCPR whose purpose is to compute the characteristic scale of the perturbation kernel appropriate for prior given the Vector V of parameters\n\n\n\n\n\n","category":"function"},{"location":"#KissABC.deperturb","page":"Home","title":"KissABC.deperturb","text":"deperturb(prior::Distribution, sample, r1, r2)\n\nFunction for ABCDE whose purpose is computing sample + γ (r1 - r2) + ϵ (the perturbation function of differential evolution) in a way suited to the prior.\n\nArguments:\n\nprior\nsample\nr1\nr2\n\n\n\n\n\n","category":"function"},{"location":"#KissABC.kernel","page":"Home","title":"KissABC.kernel","text":"kernel(prior::Distribution, c, scale)\n\nFunction for ABCSMCPR whose purpose is returning the appropriate Distribution to use as a perturbation kernel on sample c and characteristic scale\n\nArguments:\n\nprior: prior distribution\nc: sample acting as center of perturbation kernel\nscale: characteristic scale of perturbation kernel\n\n\n\n\n\n","category":"function"},{"location":"#KissABC.kerneldensity","page":"Home","title":"KissABC.kerneldensity","text":"kerneldensity(prior::Distribution, scales, s1, s2)\n\nFunction for ABCSMCPR whose purpose is returning the probability density of observing s2 under the kernel centered on s1 with scales given by scales and appropriate for prior.\n\n\n\n\n\n","category":"function"},{"location":"#KissABC.perturb","page":"Home","title":"KissABC.perturb","text":"perturb(prior::Distribution, scales, sample)\n\nFunction for ABCSMCPR whose purpose is perturbing sample according to the appropriate kernel for prior with characteristic scales.\n\n\n\n\n\n","category":"function"}]
}
